{"version":3,"file":"static/js/551.46d7e06f.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","pages/Contacts.js","redux/contacts/selectors.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const ContainerForm = styled.form`\n  display: flex;\n  flex-direction: column;\n  max-width: 300px;\n  max-height: 500px;\n  padding: 20px;\n  border: 1px solid #000;\n  border-radius: 3px;\n`;\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  max-width: 300px;\n  padding: 0 20px;\n`;\n\nexport const Input = styled.input`\n  padding: 5px;\n  border: 1px solid #ccc;\n  font-size: 16px;\n  margin-bottom: 12px;\n  margin-top: 5px;\n`;\n\nexport const Label = styled.label`\n  padding: 5px;\n  font-size: 20px;\n`;\n","import { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { getContacts, getOperation } from 'redux/contacts/selectors';\nimport { ContainerForm, Container, Label, Input } from './ContactForm.styled';\nimport { ScaleLoader } from 'react-spinners';\nimport { Button } from '@chakra-ui/react';\n\nexport default function ContactForm() {\n  const dispatch = useDispatch();\n  const operation = useSelector(getOperation);\n  const contactItems = useSelector(getContacts);\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleChange = event => {\n    const { name, value } = event.currentTarget;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleAddContact = async () => {\n    if (name !== '' && number !== '') {\n      const isNameExists = contactItems.some(\n        contact => contact.name.toLowerCase() === name.toLowerCase()\n      );\n      if (isNameExists) {\n        alert(`${name} is already in contacts.`);\n        return;\n      } else {\n        try {\n          await dispatch(addContact({ name, number })).unwrap();\n          alert(`${name} is added to the contact list`);\n          reset();\n        } catch (error) {\n          alert(`Sorry. Error adding contact to list`);\n          console.log('Error adding contact:', error);\n        }\n      }\n    }\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <ContainerForm>\n      <Container>\n        <Label>\n          Name\n          <Input\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            value={name}\n            onChange={handleChange}\n          />\n        </Label>\n      </Container>\n      <Container>\n        <Label>\n          Number\n          <Input\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n            value={number}\n            onChange={handleChange}\n          />\n        </Label>\n      </Container>\n      {/* <button onClick={handleAddContact}>\n        {operation === 'add' ? (\n          <ScaleLoader color=\"#000000\" height={25} />\n        ) : (\n          <>Add contact</>\n        )}\n      </button> */}\n      {/* {!isLoading ? ( */}\n      <Button\n        ml=\"6\"\n        size=\"sm\"\n        variant=\"outline\"\n        height=\"35px\"\n        width=\"120px\"\n        colorScheme=\"blue\"\n        onClick={handleAddContact}\n      >\n        {operation === 'add' ? (\n          <ScaleLoader color=\"#2b6cb0\" height={15} />\n        ) : (\n          <>Add contact</>\n        )}\n      </Button>\n    </ContainerForm>\n  );\n}\n","import styled from '@emotion/styled';\n\nexport const Container = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  max-width: 500px;\n  padding: 0 20px;\n`;\n\nexport const Button = styled.button`\n  cursor: pointer;\n  background-color: #ffffff;\n  color: #000000;\n  margin-left: 10px;\n  padding: 5px 20px;\n  border: 1px solid #000000;\n  border-radius: 3px;\n  box-shadow: 0 3px 3px rgba(0, 0, 0, 0.25);\n  width: 100px;\n\n  &:active {\n    background-color: #1b8bcd;\n    color: #ffffff;\n    border: none;\n  }\n`;\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport {\n  getContacts,\n  getStatusFilter,\n  getOperation,\n} from 'redux/contacts/selectors';\nimport { Container } from './ContactList.styled';\nimport { AiFillDelete } from 'react-icons/ai';\nimport { GridLoader } from 'react-spinners';\nimport { Box, Text, Button } from '@chakra-ui/react';\n\nexport default function ContactList() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n  const filter = useSelector(getStatusFilter);\n  const operation = useSelector(getOperation);\n\n  const handleDeleteContact = contactId => {\n    dispatch(deleteContact(contactId));\n  };\n\n  const filteredContacts = contacts.filter(contact => {\n    const normalizedFilter = filter ? filter.toLowerCase() : '';\n\n    return contact.name.toLowerCase().includes(normalizedFilter);\n  });\n\n  return (\n    <Container>\n      {filteredContacts.map(({ name, number, id }) => (\n        <Text key={id}>\n          <Box>\n            {`${name}: ${number}`}\n            {/* <Button onClick={() => handleDeleteContact(id)}>Delete</Button> */}\n\n            <Button\n              ml=\"6\"\n              size=\"sm\"\n              variant=\"outline\"\n              height=\"35px\"\n              width=\"120px\"\n              colorScheme=\"blue\"\n              onClick={() => handleDeleteContact(id)}\n            >\n              {operation === id ? (\n                <GridLoader size={2} color=\"#2b6cb0\" />\n              ) : (\n                <AiFillDelete size={25} color=\"#2b6cb0\" />\n              )}\n            </Button>\n          </Box>\n        </Text>\n      ))}\n    </Container>\n  );\n}\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  max-width: 300px;\n  padding: 20px;\n`;\n\nexport const Label = styled.label`\n  padding: 5px;\n  font-size: 20px;\n  margin-bottom: 15px;\n`;\n\nexport const Input = styled.input`\n  padding: 5px;\n  border: 1px solid #ccc;\n  font-size: 16px;\n  margin-top: 10px;\n`;\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setStatusFilter } from 'redux/contacts/filtersSlice';\nimport { getStatusFilter } from 'redux/contacts/selectors';\nimport { Container, Label, Input } from './Filter.styled';\n\nexport default function Filter() {\n  const dispatch = useDispatch();\n  const filter = useSelector(getStatusFilter);\n\n  const changeFilter = event => {\n    dispatch(setStatusFilter(event.currentTarget.value));\n  };\n\n  return (\n    <Container>\n      <Label>\n        Find contacts by name\n        <Input type=\"text\" value={filter} onChange={changeFilter} />\n      </Label>\n    </Container>\n  );\n}\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ContactForm from '../components/ContactForm/ContactForm';\nimport ContactList from '../components/ContactList/ContactList';\nimport Filter from '../components/Filter/Filter';\nimport { getOperation, getError } from '../redux/contacts/selectors';\nimport { fetchContacts } from '../redux/contacts/operations';\nimport { Helmet } from 'react-helmet';\nimport { Container, Flex, Box, HStack, Text } from '@chakra-ui/react';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const operation = useSelector(getOperation);\n  const error = useSelector(getError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Container maxW=\"7xl\" padding=\"5\">\n      <Flex>\n        <HStack spacing=\"12px\">\n          <Helmet>\n            <title>Your contacts</title>\n          </Helmet>\n\n          <Box w=\"470px\" h=\"300\">\n            <Text fontSize=\"2xl\" as=\"b\">\n              Phonebook\n            </Text>\n            <ContactForm />\n          </Box>\n\n          <Box>\n            <Text fontSize=\"2xl\" as=\"b\">\n              Contacts\n            </Text>\n            <Filter />\n            {operation === 'fetch' && !error ? (\n              <b>Request in progress...</b>\n            ) : (\n              <ContactList />\n            )}\n          </Box>\n        </HStack>\n      </Flex>\n    </Container>\n  );\n}\n","export const getContacts = state => state.contacts.items;\n\nexport const getIsLoading = state => state.contacts.isLoading;\n\nexport const getError = state => state.contacts.error;\n\nexport const getOperation = state => state.contacts.operation;\n\nexport const getStatusFilter = state => state.filters;\n"],"names":["ContainerForm","styled","Container","Input","Label","ContactForm","dispatch","useDispatch","operation","useSelector","getOperation","contactItems","getContacts","useState","name","setName","number","setNumber","handleChange","event","currentTarget","value","handleAddContact","some","contact","toLowerCase","alert","addContact","unwrap","reset","console","log","type","pattern","title","required","onChange","ml","size","variant","height","width","colorScheme","onClick","ScaleLoader","color","ContactList","contacts","filter","getStatusFilter","filteredContacts","normalizedFilter","includes","map","id","contactId","deleteContact","GridLoader","Filter","setStatusFilter","Contacts","error","getError","useEffect","fetchContacts","maxW","padding","spacing","Helmet","w","h","fontSize","as","state","items","getIsLoading","isLoading","filters"],"sourceRoot":""}